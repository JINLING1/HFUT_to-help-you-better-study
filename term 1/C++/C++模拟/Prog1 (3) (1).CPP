/*-------------------------------------------------------
【程序填空】
---------------------------------------------------------

题目：快速排序算法通过多次比较和交换来实现排序，其排序流
      程如下：
      (1)首先设定一个分界值（通常选用数组的第一个数），通
      过该分界值将数组分成左右两部分。   
      (2)将大于或等于分界值的数据集中到数组右边，小于分界
      值的数据集中到数组的左边。此时，左边部分中各元素都小
      于分界值，而右边部分中各元素都大于或等于分界值。   
      (3)然后，左边和右边的数据可以独立排序。对于左侧的数
      组数据，又可以取一个分界值，将该部分数据分成左右两部
      分，同样在左边放置较小值，右边放置较大值。右侧的数组
      数据也可以做类似处理。   
      (4)重复上述过程，可以看出，这是一个递归定义。通过递归
      将左侧部分排好序后，再递归排好右侧部分的顺序。当左、
      右两个部分各数据排序完成后，整个数组的排序也就完成了。 

-------------------------------------------------------*/
#include <iostream>
using namespace std;
 
void Qsort(int arr[], int low, int high){
    if (high <= low) return;
    int i = low;
    int j = high;
/***********SPACE***********/
    int key = 【?】;  //设定一个分界值
    while (true){
/***********SPACE***********/
        while (【?】){/*从左向右找比key大的值*/
            i++;
            if (i == high){
                  break;
            }
        }
        /*从右向左找比key小的值*/
        while (arr[j] >= key){
/***********SPACE***********/
            【?】;
            if (j == low){
                break;
            }
        }
        if (i >= j){
            break;
        }
        /*交换i,j对应的值*/
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    /*中枢值与j对应值交换*/
/***********SPACE***********/
    【?】;
    arr[j] = key;
    Qsort(arr, low, j - 1);       //递归将左侧部分排好序
/***********SPACE***********/
    【?】;      //递归将右侧部分排好序
}
 
int main(){   
    int a[9] = {57, 68, 59, 52, 72, 28, 96, 33, 24};
    Qsort(a, 0, 8);
    for(int i = 0; i < 9; i++){ 
            cout << a[i] << " "; 
        }
    return 0;
} 
